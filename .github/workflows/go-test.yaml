# Copyright 2021 Chainguard, Inc.
# SPDX-License-Identifier: Apache-2.0

name: Test

on:
  pull_request:
    branches: [ 'main', 'release-*' ]

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code onto GOPATH
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    # https://github.com/mvdan/github-actions-golang#how-do-i-set-up-caching-between-builds
    - uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Set up Go
      uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
      with:
        go-version-file: './go.mod'

    - run: |
        # We limit the depth to 3 mostly to avoid go.mod files that get pulled into `third_party` like some hashicorp repos.
        for dir in $(find . -name go.mod -maxdepth 3 -exec dirname {} \; ); do
          echo "::group:: $dir"
          pushd $dir
          # Exclude running unit tests against third_party repos.
          go test -race $(go list ./... | grep -v third_party/)
          popd
          echo ::endgroup::
        done
